# Welcome to my Ultimate Plex Stack!

# I was hoping this could maybe help some people out when setting up their stack
#
# Environment Variable Examples:
# USER_ID = 1000
# TZ = America/Edmonton
# BASE_PATH = /home/username/docker
#
# https://trash-guides.info/Hardlinks/Hardlinks-and-Instant-Moves/ # This can be useful for establishing how the media will be presented below
# UNRAID_SHARE = /mnt/media   # This can also be renamed to "SHARE" or "MEDIA" this is where you will present your media
#
# NOTE: This is not a plug and play solution, some research / customization will be required to make this work as intented
# Feel free to customize ie: remove/change/add containers as needed - one size does not fit all

---
version: "2.1"

services:
  #Plex - used to display the media
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TZ}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
    ports:
      - 32400:32400
    devices:
     - /dev/dri:/dev/dri #Required for plex HW transcoding / QuickSync
    volumes:
      - ${BASE_PATH}/plex/config:/config
      - ${UNRAID_SHARE}/media/tv:/tv
      - ${UNRAID_SHARE}/media/movies:/movies
    restart: unless-stopped
    
  #Radarr - used to find movies automatically
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/radarr/config:/config
      - ${UNRAID_SHARE}:/share #Access to the entire share
    ports:
      - 7878:7878
    restart: unless-stopped
    
  #Sonarr - used to find tv shows automatically
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/sonarr/config:/config
      - ${UNRAID_SHARE}:/share #Access to the entire share
    ports:
      - 8989:8989
    restart: unless-stopped
    
  #Prowlarr - manages your Sonarr, Radarr and download client
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/prowlarr/config:/config
    ports:
      - 9696:9696
    restart: unless-stopped

  #Flaresolerr - Used as a proxy server to bypass Cloudflare and DDoS-GUARD protection.
  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TZ}
    ports:
      - 8191:8191
    restart: unless-stopped

  # vpn + wireguard   
  vpn:
    image: thrnz/docker-wireguard-pia
    cap_add:
      - NET_ADMIN
      # SYS_MODULE might not be needed with a 5.6+ kernel?
      - SYS_MODULE
    ports:
      - 8080:8080
    environment:
      # The following env vars are required:
      - LOC=${VPN_LOC}
      - USER=${VPN_USER}
      - PASS=${VPN_PASS}
      # The rest are optional:
      - LOCAL_NETWORK=192.168.1.0/24
      - KEEPALIVE=25
      - VPNDNS=8.8.8.8,8.8.4.4
      - PORT_FORWARDING=1
      - WG_USERSPACE=1
      - PORT_PERSIST=1
      - PORT_SCRIPT=/pia-shared/ports.sh 
      - FIREWALL=1
      - PORT_FILE_CLEANUP=1
    volumes:
      # Auth token is stored here
      - ${BASE_PATH}/pia-wg/pia:/pia
      # If enabled, the forwarded port is dumped to /pia-shared/port.dat for potential use in other containers
      - ${BASE_PATH}/pia-wg/scripts:/pia-shared
    sysctls:
      # wg-quick fails to set this without --privileged, so set it here instead if needed
      - net.ipv4.conf.all.src_valid_mark=1
      # May as well disable ipv6. Should be blocked anyway.
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    restart: always
    # The container has no recovery logic. Use a healthcheck to catch disconnects.
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    network_mode: "service:vpn"
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
    volumes:
      - ${BASE_PATH}/pia-wg/qbt:/config
      - ${BASE_PATH}/pia-wg/scripts:/config/scripts
      - ${UNRAID_SHARE}:/share
    restart: unless-stopped
    
  #De-unhealth - used to restart qbitorrent if gluetun VPN tunnel ever drops
  deunhealth:
    build: .
    image: qmcgaw/deunhealth
    container_name: deunhealth
    environment:
      - LOG_LEVEL=info
      - HEALTH_SERVER_ADDRESS=127.0.0.1:9999
      - TZ=${TZ}
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      
  #Overseer - allows users to request media on their own
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/overseer/config:/config
      - ${UNRAID_SHARE}:/share #Access to the entire share
    ports:
      - 5055:5055
    restart: unless-stopped

  # #Bazarr - for subtitles. Try to use SRT format if you can rather than PGS due to performance issues
  # bazarr:
  #   container_name: bazarr
  #   image: lscr.io/linuxserver/bazarr:latest
  #   restart: unless-stopped
  #   environment:
  #     - PUID=${USER_ID}
  #     - PGID=${GROUP_ID}
  #     - TZ=${TZ}
  #   volumes:
  #     - ${BASE_PATH}/bazarr/config:/config
  #     - ${UNRAID_SHARE}:/share
  #   ports:
  #     - 6767:6767
      
  # #Plex Auto Languages - This switchs languages automatically example: watching english show and non english speaks you get subtitle lol
  # plexautolanguages:
  #   image: remirigal/plex-auto-languages:latest
  #   container_name: plex-auto-languages
  #   environment:
  #     - PLEX_URL=${PLEX_URL} #This is your local URl example: http://192.168.1.10:32400
  #     #To find your plex token go to https://app.plex.tv/, go to your library, click on the 3 dots on the bottom right of one of your tv/movie posters
  #     #Then click "View XML" in the bottom right of that popup, look at the URL of the XML window and find your X-Plex-Token= in the URL (at the very end)
  #     - PLEX_TOKEN=${PLEX_TOKEN}
  #     - TZ=${TZ}
  #   volumes:
  #     - ${BASE_PATH}/pal/config:/config
